import os
from pathlib import Path
import xml.etree.ElementTree as ET
import argparse
from collections import OrderedDict

def scan_classes(voc_dir):
    classes = OrderedDict()
    for xml_file in voc_dir.rglob("*.xml"):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        for obj in root.iter("object"):
            name = obj.find("name").text.strip()
            if name not in classes:
                classes[name] = len(classes)
    return list(classes.keys())

def voc_to_yolo(voc_dir, images_dir, labels_dir, yaml_out, names=None):
    voc_dir, images_dir, labels_dir = map(Path, [voc_dir, images_dir, labels_dir])
    labels_dir.mkdir(parents=True, exist_ok=True)

    if names is None:
        names = scan_classes(voc_dir)
    name2id = {n: i for i, n in enumerate(names)}

    n_converted = 0
    for xml_file in voc_dir.glob("*.xml"):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        size = root.find("size")
        w = float(size.find("width").text)
        h = float(size.find("height").text)
        filename = root.find("filename").text
        stem = Path(filename).stem

        lines = []
        for obj in root.iter("object"):
            name = obj.find("name").text.strip()
            if name not in name2id:
                continue
            cls = name2id[name]
            bnd = obj.find("bndbox")
            xmin = float(bnd.find("xmin").text)
            ymin = float(bnd.find("ymin").text)
            xmax = float(bnd.find("xmax").text)
            ymax = float(bnd.find("ymax").text)

            # 转YOLO归一化
            bw = xmax - xmin
            bh = ymax - ymin
            cx = xmin + bw / 2.0
            cy = ymin + bh / 2.0

            cx /= w; cy /= h; bw /= w; bh /= h
            if bw <= 0 or bh <= 0:
                continue
            cx = min(max(cx, 0.0), 1.0)
            cy = min(max(cy, 0.0), 1.0)
            bw = min(max(bw, 0.0), 1.0)
            bh = min(max(bh, 0.0), 1.0)
            lines.append(f"{cls} {cx:.6f} {cy:.6f} {bw:.6f} {bh:.6f}")

        if lines:
            with open(labels_dir / f"{stem}.txt", "w", encoding="utf-8") as f:
                f.write("\n".join(lines))
            n_converted += 1

    print(f"[OK] VOC->YOLO converted: {n_converted} images to {labels_dir}")

    # 自动生成 YAML（假设 images/train 与 images/val 已划分完成）
    yaml = Path(yaml_out)
    yaml.parent.mkdir(parents=True, exist_ok=True)
    yaml_content = f"""# Auto-generated by voc_to_yolo.py
path: {images_dir.resolve().parent}
train: images/train
val: images/val
names:
"""
    for i, n in enumerate(names):
        yaml_content += f"  {i}: {n}\n"

    with open(yaml, "w", encoding="utf-8") as f:
        f.write(yaml_content)
    print(f"[OK] Wrote dataset YAML to {yaml}")

if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    ap.add_argument("--voc", required=True, help="VOC xml dir, e.g. datasets/shiprs/annotations")
    ap.add_argument("--images", required=True, help="images root, e.g. datasets/shiprs/images")
    ap.add_argument("--labels", default="datasets/shiprs/labels", help="output labels dir")
    ap.add_argument("--yaml", default="data/shiprs.yaml", help="output yaml path")
    args = ap.parse_args()

    voc_to_yolo(args.voc, args.images, args.labels, args.yaml)
