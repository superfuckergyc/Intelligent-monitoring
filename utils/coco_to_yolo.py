import json
import os
from pathlib import Path
from collections import defaultdict
import argparse

def coco_to_yolo(ann_path, images_dir, labels_dir, yaml_out, names=None):
    labels_dir = Path(labels_dir)
    labels_dir.mkdir(parents=True, exist_ok=True)

    with open(ann_path, "r", encoding="utf-8") as f:
        coco = json.load(f)

    # category id -> 0..N-1 紧凑映射；names 同步写入
    cats = sorted(coco["categories"], key=lambda x: x["id"])
    if names is None:
        names = [c["name"] for c in cats]
    catid2idx = {c["id"]: i for i, c in enumerate(cats)}

    # image_id -> file_name, width, height
    imgs = {im["id"]: im for im in coco["images"]}
    # 收集每张图的标注
    img_to_anns = defaultdict(list)
    for ann in coco["annotations"]:
        if ann.get("iscrowd", 0) == 1:  # 忽略crowd
            continue
        if "bbox" not in ann:
            continue
        img_to_anns[ann["image_id"]].append(ann)

    # 写YOLO标签文件
    n_with_labels = 0
    for img_id, im in imgs.items():
        w, h = im.get("width"), im.get("height")
        fn = im["file_name"]
        stem = Path(fn).stem
        label_path = labels_dir / f"{stem}.txt"

        anns = img_to_anns.get(img_id, [])
        lines = []
        for a in anns:
            cid = a["category_id"]
            if cid not in catid2idx:
                continue
            cls = catid2idx[cid]
            x, y, bw, bh = a["bbox"]  # COCO: [x_min, y_min, w, h]
            # 转为 YOLO: cx, cy, w, h (归一化)
            cx = (x + bw / 2) / w
            cy = (y + bh / 2) / h
            nw = bw / w
            nh = bh / h
            # 边界裁剪
            cx = min(max(cx, 0.0), 1.0)
            cy = min(max(cy, 0.0), 1.0)
            nw = min(max(nw, 0.0), 1.0)
            nh = min(max(nh, 0.0), 1.0)
            if nw <= 0 or nh <= 0:
                continue
            lines.append(f"{cls} {cx:.6f} {cy:.6f} {nw:.6f} {nh:.6f}")

        # 仅在有标注时写文件（若你希望空文件也写，可去掉判断）
        if lines:
            with open(label_path, "w", encoding="utf-8") as f:
                f.write("\n".join(lines))
            n_with_labels += 1

    print(f"[OK] Converted {n_with_labels} images with labels to {labels_dir}")

    # 自动生成 YAML
    yaml = Path(yaml_out)
    yaml.parent.mkdir(parents=True, exist_ok=True)

    # 假设你的图片已经按 images/train, images/val 放好（或先用 split_train_val.py）
    yaml_content = f"""# Auto-generated by coco_to_yolo.py
path: {Path(images_dir).resolve().parent}
train: images/train
val: images/val
names:
"""
    for i, n in enumerate(names):
        yaml_content += f"  {i}: {n}\n"

    with open(yaml, "w", encoding="utf-8") as f:
        f.write(yaml_content)
    print(f"[OK] Wrote dataset YAML to {yaml}")

if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    ap.add_argument("--ann", required=True, help="COCO json path, e.g. datasets/shiprs/annotations/instances_trainval.json")
    ap.add_argument("--images", required=True, help="images root, e.g. datasets/shiprs/images")
    ap.add_argument("--labels", default="datasets/shiprs/labels", help="output labels dir")
    ap.add_argument("--yaml", default="data/shiprs.yaml", help="output yaml path")
    args = ap.parse_args()

    coco_to_yolo(args.ann, args.images, args.labels, args.yaml)
